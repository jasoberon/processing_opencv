#include <iostream>
#include <string>
#include <vector>

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include <opencv2/opencv.hpp>
#include <iostream>

using namespace cv;
using namespace std;

int main(int argc, char* argv[])
{
	VideoCapture cap(1);  //selecciona camara. 0 local, 1 externa

	if (cap.isOpened() == false)
	{
		cout << "No se puede conectar la video camara" << endl;
		cin.get();    //espera a que se presione cualquier tecla
		return -1;
	}

	//***** creacion de los controles ********************************************

	namedWindow("Controles", CV_WINDOW_AUTOSIZE); //crea ventana llamada "Controles"

	int iLowH = 0;
	int iHighH = 179;

	int iLowS = 0;
	int iHighS = 255;

	int iLowV = 0;
	int iHighV = 255;

	//Crea las barras "trackbars" en la ventana de "Controles"
	cvCreateTrackbar("LowH", "Controles", &iLowH, 179); //Hue (0 - 179)
	cvCreateTrackbar("HighH", "Controles", &iHighH, 179);
	cvCreateTrackbar("LowS", "Controles", &iLowS, 255); //Saturation (0 - 255)
	cvCreateTrackbar("HighS", "Controles", &iHighS, 255);

	cvCreateTrackbar("LowV", "Controles", &iLowV, 255); //Value (0 - 255)
	cvCreateTrackbar("HighV", "Controles", &iHighV, 255);

   //********************************************************************************************
	double dWidth = cap.get(CAP_PROP_FRAME_WIDTH); //get the width of frames of the video
	double dHeight = cap.get(CAP_PROP_FRAME_HEIGHT); //get the height of frames of the video

	
	cout << "Resolution of the video : " << dWidth << " x " << dHeight << endl;
	
	string window_name = "My Camera Feed";
	namedWindow(window_name); //create a window called "My Camera Feed"
	

	while (true)
	{
		Mat frame, hsv, binary;

		bool bSuccess = cap.read(frame); // read a new frame from video 

		if (bSuccess == false)
		{
			cout << "Video camera is disconnected" << endl;
			cin.get(); //Wait for any key press
			break;
		}

		// obtener frame de la web cam
		//************************************* cap >> frame;

		// convertir imagen RGB a HSV 
		cvtColor(frame, hsv, CV_BGR2HSV);

		// aplicar filtro para color deseado
		//********** inRange(hsv, Scalar(110, 50, 50), Scalar(130, 255, 255), binary);  *************************
		inRange(hsv, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), binary); //Threshold the image
		
		// aplicar tranformaciones morfologicas (extrae la region de interes)
		Mat element = getStructuringElement(MORPH_RECT, Size(15, 15));
		erode(binary, binary, element);
		dilate(binary, binary, element);

		// buscar contornos en la imagen binaria
		vector< vector<Point> > contours;
		findContours(binary, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);

		// dibujar todos los contornos encontrados
		drawContours(binary, contours, -1, Scalar(255), CV_FILLED);

		// dibujar rectangulo y texto con coordenadas (x, y)
		for (vector<Point> contour : contours) {
			// dibujar rectangulo
			Rect r = boundingRect(contour);
			rectangle(frame, r, CV_RGB(255, 0, 0), 2, CV_AA, 0);

			Point center(r.x + (r.width / 2), r.y + (r.height / 2));

			ostringstream str;
			str << center.x << "," << center.y;

			// mostrar texto (x, y)
			putText(frame, str.str(), center, FONT_HERSHEY_COMPLEX_SMALL, 0.60, CV_RGB(0, 255, 0), 1, CV_AA);
		}

		imshow("Track Color", frame);
		imshow("Track Color - Binary", binary);

		//show the frame in the created window
		imshow(window_name, frame);

		//wait for for 10 ms until any key is pressed.  
		//If the 'Esc' key is pressed, break the while loop.
		//If the any other key is pressed, continue the loop 
		//If any key is not pressed withing 10 ms, continue the loop 
		if (waitKey(30) == 27)
		{
			cout << "Esc key is pressed by user. Stoppig the video" << endl;
			break;
		}
	}

	return 0;

}
